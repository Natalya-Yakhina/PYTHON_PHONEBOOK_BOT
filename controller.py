# pip install python-telegram-bot - –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É

from telegram import Update, Bot, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, Filters, MessageHandler, ConversationHandler
import json
import logger as log

bot = Bot(token='5783314859:AAH0yxtMbSfflc03SxZaxamMhOZoV_RjKr8')
updater = Updater(token='5783314859:AAH0yxtMbSfflc03SxZaxamMhOZoV_RjKr8')
dispatcher = updater.dispatcher

phone_number = {'id': 0, 'lastname': '', 'name': '', 'num': ''}
contact = []

LASTNAME, NAME, NUM = range(3) # –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —ç—Ç–∞–ø–æ–≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ 

ALL_CONTACTS, DELETE = range(2)

ALL_FUNCTIONS = '/allcontact -- –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n' \
                '/addcontact-- –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç\n' \
                '/deletecontact -- –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç\n' \
                '/findcontact -- –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç\n' \
                '/exporttojson -- –≠–∫—Å–ø–æ—Ä—Ç –≤ json\n' \
                '/importfromjson -- –ò–º–ø–æ—Ä—Ç –∏–∑ json\n '

def start(update, context):
    context.bot.send_message(update.effective_chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —è –ë–æ—Ç-—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ü§ì!\n'
                                                        '–Ø –º–Ω–æ–≥–æ —á–µ–≥–æ —É–º–µ—é:')
    context.bot.send_message(update.effective_chat.id, ALL_FUNCTIONS)
    log.text_in_log('---–ó–ê–ü–£–°–ö –ë–û–¢–ê---')

def cancel(update, _):
    log.text_in_log('---–í–´–•–û–î---')
    update.message.reply_text('–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏',reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def message(update, context): 
    text = update.message.text
    if text.lower() == '–ü—Ä–∏–≤–µ—Ç':
        context.bot.send_message(update.effective_chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —è –ë–æ—Ç-—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ü§ì!\n'
                                                            '–Ø –º–Ω–æ–≥–æ —á–µ–≥–æ —É–º–µ—é:')
    else:
        context.bot.send_message(update.effective_chat.id, '–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–æ –º–æ–≥—É —á—Ç–æ-—Ç–æ –ø–æ–¥—Å–∫–∑–∞—Ç—å. –Ø –º–Ω–æ–≥–æ —á–µ–≥–æ —É–º–µ—é:')
        context.bot.send_message(update.effective_chat.id, ALL_FUNCTIONS)

def unknown(update, context):
    context.bot.send_message(update.effective_chat.id, '–¢–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —è –Ω–µ –∑–Ω–∞—é. –ù–æ –≤–æ—Ç —á—Ç–æ —è —É–º–µ—é:')
    context.bot.send_message(update.effective_chat.id, ALL_FUNCTIONS)

def entry():
    with open("phone_number.json", "w", encoding="utf-8") as tel:
        tel.write(json.dumps(phone_number, ensure_ascii=False))

def load():
    global contact
    try:
        with open("contacts.json", "r", encoding="utf-8") as cont:
            contact = json.load(cont)
    except:
        contact = []

def add_contact(phone_number):
    try:
        load()
        temp = []
        ID = False
        for i in contact:
            temp.append(i["id"])
        while ID == False:
            if phone_number["id"] in temp:
                phone_number["id"] += 1
            else:
                ID = True
    except:
        contact.append(phone_number)

        with open("contacts.json", "w", encoding="utf-8") as cont:
            cont.write(json.dumps(contact, ensure_ascii=False)) # dumps - —Å–µ—Ä–∏–∞–ª–∏–∑–∏—Ä–æ–≤—ã–≤–∞–µ—Ç obj –≤ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        log.text_in_log(
            f"–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {phone_number['lastname']} {phone_number['name']} {phone_number['num']}")
        contact.append(phone_number)
        with open("contacts.json", "w", encoding="utf-8") as cont:
            cont.write(json.dumps(contact, ensure_ascii=False))
        log.text_in_log(
            f"–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {phone_number['lastname']} {phone_number['name']} {phone_number['num']}")

def lastname(update, _):
    phone_number['lastname'] = update.message.text
    entry()
    log.text_in_log(f'–í–≤–µ–¥–µ–Ω–∞ —Ñ–∞–º–∏–ª–∏—è: {update.message.text}')
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∏–º—è:')
    return NAME

def name(update, _):
    phone_number['name'] = update.message.text
    entry()
    log.text_in_log(f'–í–≤–µ–¥–µ–Ω–æ –∏–º—è: {update.message.text}')
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
    return NUM

def num(update, _):
    phone_number['num'] = update.message.text
    entry()
    log.text_in_log(f"–í–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {update.message.text}")
    add_contact(phone_number)
    return ConversationHandler.END

def all_contacts(update, _):
    pass

def editing(update, _):
    pass

def delete(update, _):
    pass

if __name__ == '__main__':
    updater = Updater(token = '5783314859:AAH0yxtMbSfflc03SxZaxamMhOZoV_RjKr8')
    dispatcher = updater.dispatcher
    start_handler = CommandHandler('start', start)
    record_handler = ConversationHandler(
        entry_points = [MessageHandler(Filters.text, message)],
        states = {
            LASTNAME: [MessageHandler(Filters.text & ~Filters.command, lastname)],
            NAME: [MessageHandler(Filters.text & ~Filters.command, name)],
            NUM: [MessageHandler(Filters.text & ~Filters.command, num)]
            },
            fallbacks=[CommandHandler('cancel', cancel)],
    )

    base_handler = ConversationHandler(
        entry_points=[MessageHandler(Filters.text, message)],
        states = {
         ALL_CONTACTS: [MessageHandler(Filters.text & ~Filters.command, all_contacts)],
            DELETE: [MessageHandler(Filters.text & ~Filters.command, delete)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    message_handler = MessageHandler(Filters.text, message)

dispatcher.add_handler(start_handler)
dispatcher.add_handler(record_handler)
dispatcher.add_handler(base_handler)
dispatcher.add_handler(message_handler)

print('server_started')

updater.start_polling()
updater.idle()